#!/usr/bin/env python
import json
import os

class bcolors:
  HEADER = '\033[95m'
  OKBLUE = '\033[94m'
  OKGREEN = '\033[92m'
  WARNING = '\033[93m'
  FAIL = '\033[91m'
  NORMAL = '\033[0m'
  BOLD = '\033[1m'
  UNDERLINE = '\033[4m'

config = {}
for localPath, operativePath in json.load(open("config.json"))["links"].items():
  localPath = os.path.realpath(localPath)
  operativePath = os.path.expanduser(operativePath)
  config[localPath] = operativePath

missingFiles = filter(lambda f: not os.path.exists(f), config.keys())
if (len(missingFiles)):
  exit("Some files are missing\n  " + "\n  ".join(missingFiles))

existingFiles = filter(os.path.exists, config.values())
if (len(existingFiles)):
  existingFiles.sort()
  print str(len(existingFiles)) + " operative paths already exist"
  print bcolors.WARNING + "  " + "\n  ".join(existingFiles) + bcolors.NORMAL

pairsToLink = filter(lambda (localPath, operativePath): not os.path.exists(operativePath), config.items())
# print "Creating " + str(len(pairsToLink)) + " symlinks"
successCount = 0
failCount = 0
successfulLinks = list()

print bcolors.FAIL,

for (localPath, operativePath) in pairsToLink:
  os.system("mkdir -p " + os.path.dirname(operativePath))
  bashCommand = "ln -s %(localPath)s %(operativePath)s" % locals()
  if os.system(bashCommand):
    failCount+=1
  else:
    successCount+=1
    successfulLinks.append(bashCommand)

print bcolors.NORMAL;

if (len(successfulLinks)):
  successfulLinks.sort()
  print str(len(successfulLinks)) + " links succeeded"
  print bcolors.OKGREEN + "  " + "\n  ".join(successfulLinks) + bcolors.NORMAL

if (failCount):
  print bcolors.FAIL + str(failCount) + " LINKS FAILED!" + bcolors.NORMAL
