" VIM PLUG
  call plug#begin('~/.vim/plugged')
    Plug 'airblade/vim-gitgutter'
    Plug 'bling/vim-airline'
    Plug 'dag/vim-fish'
    Plug 'fatih/vim-go'
    Plug 'jeetsukumaran/vim-filebeagle'
    Plug 'jeetsukumaran/vim-indentwise'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'junegunn/goyo.vim'       " distraction-free mode
    Plug 'junegunn/vim-easy-align'
    " Plug 'junegunn/vim-peekaboo'
    Plug 'mattn/emmet-vim'
    " Plug 'othree/html5.vim'
    Plug 'pangloss/vim-javascript'
    Plug 'ryanoasis/vim-devicons'
    Plug 'scrooloose/nerdtree'
    Plug 'scrooloose/syntastic'
    Plug 'Shougo/deoplete.nvim'
    Plug 'SirVer/ultisnips'
    Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
    Plug 'terryma/vim-multiple-cursors'
    Plug 'tomtom/tcomment_vim'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-rhubarb'
    Plug 'vimwiki/vimwiki'

    " colorschemes
    Plug 'mhartington/oceanic-next'
    Plug 'morhetz/gruvbox'
    Plug 'nanotech/jellybeans.vim'

    "run :PlugInstall to install new plugins
  call plug#end()
  let g:webdevicons_enable_airline_tabline = 1

" AIRLINE PLUGIN config
  set laststatus=2                                 "always show airline, instead of only after splitview
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1     "show buffers on top
  let g:airline#extensions#tabline#fnamemod = ':t' "show just the filename
  set t_Co=256                                     "help airline show colors

" DEOPLETE PLUGIN config
  com! Deoplete call deoplete#enable() " use this to start deoplete
  let g:deoplete#file#enable_buffer_path=1   "path completion is relative

  if (hostname() == "Smithers.local")
    let g:python3_host_prog='/usr/local/bin/python3'
  " elseif (hostname == "zamperini2")
  "   let g:python3_host_prog='/usr/bin/python3'
  endif

" GOYO PLUGIN config
  let g:goyo_width = 81
  " make vim close the First time you do :quit
  " https://github.com/junegunn/goyo.vim/wiki/Customization
  function! s:goyo_enter()
    let b:quitting = 0
    let b:quitting_bang = 0
    autocmd QuitPre <buffer> let b:quitting = 1
    cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
  endfunction
  function! s:goyo_leave()
    " Quit Vim if this is the only remaining buffer
    if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
      if b:quitting_bang
        qa!
      else
        qa
      endif
    endif
  endfunction
  autocmd User GoyoEnter call <SID>goyo_enter()
  autocmd User GoyoLeave call <SID>goyo_leave()

" VIM-JAVASCRIPT PLUGIN conifg
  let g:javascript_plugin_jsdoc = 1

" SYNTASTIC PLUGIN config
  let g:syntastic_html_checkers = ['jshint']
  let g:syntastic_javascript_checkers = ['jshint']

" ULTISNIPS PLUGIN config
  " workaround bug https://github.com/SirVer/ultisnips/issues/711
  let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

" VIMWIKI PLUGIN config
  let g:vimwiki_list = [{'path': '$HOME/Dropbox/vimwiki'}] " 'syntax': 'markdown', 'ext': '.md'}]

" Key Bindings
  " insert mode shortcuts
    :imap <C-@> <C-Space>
    :imap <C-Space> <C-x><C-o>
    :imap jk 
    :inoremap II <Esc>I
    :inoremap AA <Esc>A
    :inoremap jl <Esc>:
    :imap \t <Esc>:r! date "+\%Y\%m\%d"<Enter>kJA
    :imap <c-x><c-f> <plug>(fzf-complete-file)

  " normal mode shortucts
    :let mapleader = " "
    "insert time:
    :nmap <Leader>it :r! date "+\%Y\%m\%d"<Enter>kJ
    "search for word in working directory
    :nmap <Leader>sw "zyiw:Ag z
    "insert js log
    :nmap <Leader>il oconsole.log();F)i
    "insert js LOG:
    :nmap <Leader>iL oconsole.log('%c', 'font-size:15px');F,hi
    :nmap <Leader>liw yiwoconsole.log('0', 0);<Esc>
    "insert jsdoc comment in html
    " :nmap <Leader>ihjd :syntax sync fromstart\O/**\*/^XO€kb * 
    " :nmap <Leader>ihjd O/**\*\*/kA
    :nmap <C-h> 2zh
    :nmap <C-l> 2zl
    :nnoremap Q <nop>
    :nmap <Leader>T :enew<cr>
    :nmap <Leader>k :bnext
    :nmap <Leader>j :bprevious
    let g:BASH_Ctrl_j = 'off' "this is undocumented!
    :nmap <c-j> :bprevious
    :nmap <c-k> :bnext
    :nmap <Leader>x :NERDTreeClose<enter>:bd
    :nmap <Leader>X :NERDTreeClose<enter>:bd!
    :nmap <Leader><Leader> :w<Enter>
    " :nmap <Leader>W :bd!\
    :nmap <Leader><Tab> :b#
          "most recent buffer
    :nmap <Leader>ss :syntax sync fromstart<enter>

    :let html_wrong_comments=1 "be lenient with html comment syntax. This is a must-have for documented Polymer code.

    "easy-align-vim stuff
    :xmap ga <Plug>(EasyAlign)
    :nmap ga <Plug>(EasyAlign)

    " fzf stuff
    :nmap  :Files
    :nmap <Leader>or :History
    " ^ open recent file
    :nmap <Leader>/ :History/
    :nmap <Leader><C-r> :History:
    " call histdel("cmd", "regexp") to delete mistaken history items
    :nmap <Leader>f~ :FZF ~

    " nerdtree stuff
    :nmap <Leader>tt :NERDTreeToggle
    :nmap <Leader>tf :NERDTreeFind

    " git stuff
    :nmap <Leader>gb :Gblame<Enter>

    " GitGutter stuff
    :nmap <Leader>ga :GitGutterStageHunk<Enter>
    :nmap <Leader>gH :GitGutterLineHighlightsToggle<Enter>
    :nmap <Leader>gn :GitGutterNextHunk<Enter>
    :nmap <Leader>gN :GitGutterPrevHunk<Enter>
    :nmap <Leader>gP :GitGutterPreviewHunk<Enter>
    :nmap <Leader>gu :GitGutterUndoHunk<Enter>

    " ternjs stuf
    :nmap <Leader>td :TernDoc<cr>
    :autocmd CompleteDone * pclose

  " terminal mode shortcuts
    if has('nvim')
      :tnoremap <C-w> <C-\><C-n><C-w>
    endif

" Miscellanious commands
  com! JJ exec "cd /Users/smithers/git/UC2/uc2-app/uc2/src/main/web/"
  com! JU exec "cd /Users/smithers/git/UC2/uc2-app/"
  com! Uc2js exec "cd /Users/smithers/git/UC2/uc2-app/uc2/src/main/web/"
  com! Uc2 exec "cd /Users/smithers/git/UC2/uc2-app/"
  com! JL exec "cd /home/smithers/git/lambda"
  com! JM exec "cd /home/smithers/git/mailman"
  com! JT exec "cd /home/smithers/git/TourApp/app"

" Viewer
  func! Reader()
      :AnsiEsc
      :AirlineToggle
      let g:airline#extensions#tabline#enabled = 0
      set laststatus=0
      set nonu
  endfu

" Prose
  set nojoinspaces  " prevent vim from inserting 2 spaces after periods.
  func! WriteMode()
    set fo=ant
    set flp=^\\s*\\(-\\\\|\\d\\+\\.\\)\\s*
        "formtlistpat=^\s*\(-\|\d\+\.\)\s*
    set formatprg=par\ -jw80
    set nosmartindent
    set foldmethod=indent
    " ^ this only affects gqip, NOTHING ELSE
    " see [help gq]
    set whichwrap+=h,l
    let g:deoplete#disable_auto_complete = 1
    set sidescrolloff=0
  endfu
  com! WM call WriteMode()
  func! NoWriteMode()
    set fo=croql
    " set flp=^\s*\d\+[\]:.)}\t ]\s*
    set formatprg=""
    set smartindent
    set foldmethod=indent
    set whichwrap=b,s
    let g:deoplete#disable_auto_complete = 0

    set sidescrolloff=5 " Show next 5 columns while side-scrolling.
  endfu
  com! WMoff call NoWriteMode()

  "I don't use the below function because scrolling is really funky. A
  "paragraph is either all-visible or all-hidden. Nothing in between.
  func! SoftWrappedProcessorMode()
    setlocal noexpandtab
    setlocal wrap
    setlocal linebreak
    setlocal breakindent
    map j gj
    map k gk
    set formatprg=par -jw80
    "setlocal spell spelllang=en_us
    "set thesaurus+=/Users/sbrown/.vim/thesaurus/mthesaur.txt
    "set complete+=s
  endfu
  com! SoftWrapProcessor call SoftWrappedProcessorMode()

" open url on current line
  com! OpenUrl exec "!python -mwebbrowser ".(matchstr (getline("."), "https\\?://\\S\\+[^.) ]"))

" visor style terminal buffer
  " https://www.reddit.com/r/neovim/comments/3cu8fl/quick_visor_style_terminal_buffer/
  let s:termbuf = 0
  function! ToggleTerm()
      topleft 30 split
      try
          exe 'buffer' . s:termbuf
          startinsert
      catch
          terminal
          let s:termbuf=bufnr('%')
          tnoremap <buffer> <A-t>  <C-\><C-n>:close<cr>
      endtry
  endfunction
  com! ToggleTerm call ToggleTerm()
  nnoremap <A-t> :ToggleTerm<cr>


"# GUI Customization
  if has('gui_running')
    set background=dark
    set gfn=Fira\ Mono\ Medium\ for\ Powerline\ Medium\ 10,\ Monaco\ for\ Powerline:h14
    set autoread        "auto-load changes from disk

    :set guioptions-=m  "remove menu bar
    :set guioptions-=T  "remove toolbar
    :set guioptions-=r  "remove right-hand scroll bar
    :set guioptions-=L  "remove left-hand scroll bar
    :set go+=m " I think I want to keep the menu actually
  endif

" Rare Tools
  func! HighlightOverlength()
    highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/
  endfu
  func! SetWidthEightyFour()
    :vertical resize 84
  endfu

" Basics
  set ttimeoutlen=0 "timeout instantly when pressing esc during visual mode
  set foldmethod=syntax
  set foldlevelstart=99
  set nowrap
  set incsearch     "incremental search (something else also turns this on)
  set ignorecase    "search ignores case
  set smartcase     "unless there's a capital letter
  syntax enable
  set number
  set autoindent
  set smartindent

  set splitbelow    " more natural split behavior
  set splitright    " more natural split behavior

  set hidden        " leave buffers without saving

  if !&scrolloff
    set scrolloff=3 " Show next 3 lines while scrolling.
  endif
  if !&sidescrolloff
    set sidescrolloff=5 " Show next 5 columns while side-scrolling.
  endif
  "(source: http://nerditya.com/code/guide-to-neovim/)

" Tabs
  set expandtab     " SPACES over TABS
  set smarttab      " delete multiple spaces at once (as if deleting a tab character)
  com! -nargs=1 Tab set tabstop=<args> | set shiftwidth=<args> "| set softtabstop=<args>
  if (hostname() == "Smithers.local")
    :Tab 4
  elseif (hostname() == "zamperini2")
    :Tab 2
  elseif (hostname() == "zamperini3")
    :Tab 2
  endif
  func! JSFormatting()
    autocmd FileType javascript setlocal equalprg=js-beautify\ --stdin
  endfu

" Neovim specific
  if has('nvim')
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    colorscheme gruvbox
    let g:airline_theme='gruvbox'
    set background=dark
    set nofixeol      " don't insert EOL at end of file
    Deoplete
  else
    colorscheme OceanicNext
    let g:airline_theme='oceanicnext'
    set background=dark
  end


" simple session restoration http://vim.wikia.com/wiki/Go_away_and_come_back
  function! MakeSession()
    let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
    if (filewritable(b:sessiondir) != 2)
      exe 'silent !mkdir -p ' b:sessiondir
      redraw!
    endif
    let b:filename = b:sessiondir . '/session.vim'
    exe "mksession! " . b:filename
  endfunction

  function! LoadSession()
    let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
    let b:sessionfile = b:sessiondir . "/session.vim"
    if (filereadable(b:sessionfile))
      exe 'source ' b:sessionfile
    else
      echo "No session loaded."
    endif
  endfunction
  " au VimEnter * nested :call LoadSession()
  au VimLeave * :call MakeSession()

