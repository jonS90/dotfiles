" allegedly necessary for cool vim things
set nocompatible

call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
call plug#end()

" make vim close the First time you do :quit
" https://github.com/junegunn/goyo.vim/wiki/Customization
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction
function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction
autocmd User GoyoEnter call <SID>goyo_enter()
autocmd User GoyoLeave call <SID>goyo_leave()

filetype off                 " vundle required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"Plugin 'gmarik/Vundle.vim'
"Plugin 'bling/vim-airline'
call vundle#end()            " vundle required
filetype plugin indent on    " vundle required
let g:airline_powerline_fonts = 1 
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

" Misc basics
  set foldmethod=indent
  syntax on
  set number
  set autoindent
  set smartindent
  set showcmd	  " show more info about what you're doing

" Tabs
  set expandtab     " spaces are better than tab characters
  set smarttab      " don't know
  set tabstop=2     " for when you press tab
  set shiftwidth=2  " for autoindent, I think

" Prose
  set nojoinspaces
  set flp=^\\s*\\(-\\\\|\\d\\+\\.\\)\\s*
      "formtlistpat=^\s*\(-\|\d\+\.\)\s*

" Wrap gitcommit file types at the appropriate length
  " filetype indent plugin on
  " filetype on

"# GUI customization
  if has('gui_running')
    syntax enable
    set background=dark
    colorscheme solarized
  endif
  
" Highlighting overlength
  " highlight OverLength ctermbg=red ctermfg=white guibg=#592929
  " match OverLength /\%81v.\+/

" Macros
  " lazy initialization
    let @l="yiwiif (jjA == null) {^M}jja else {^Mreturn jjpa;^M}jjkk"
  " vimscript to toggle syntax highlighting
    function! ToggleSyntax()
       if exists("g:syntax_on")
          syntax off
       else
          syntax enable
       endif
    endfunction
    
"# Keyboard keys
  " insert mode shortcuts
  :imap jk 
  :inoremap II <Esc>I
  :inoremap AA <Esc>A
  :inoremap OO <Esc>O
  :inoremap Oo <Esc>o
  :inoremap jl <Esc>:
  :nnoremap \	 :e#


" wrap overlength text
  :nmap <leader>w 080lF<Space>a
  " auto-resize a window to 80+4 cols
  :nmap <leader>Width :vertical resize 84

" Pasting
  "The first line sets a mapping so that pressing \p in normal mode will invert 
  "the 'paste' option, and will then show the value of that option. The second 
  "line allows you to press \\ppp when in insert mode, to toggle 'paste' on and 
  "off. The third line enables displaying whether 'paste' is turned on in 
  "insert mode.
  "source: http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
  :nnoremap \p :set invpaste paste?<CR>
  :set pastetoggle=\\ppp
  :set showmode

