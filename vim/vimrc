" VIM PLUG
  call plug#begin('~/.vim/plugged')
    Plug 'bling/vim-airline'
    Plug 'fatih/vim-go'
    Plug 'junegunn/goyo.vim'       " distraction-free mode
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'othree/csscomplete.vim'  " css completion
    Plug 'othree/html5.vim'        " html5 completion
    Plug 'othree/yajs.vim'         " js syntax
    Plug 'scrooloose/nerdtree'
    Plug 'scrooloose/syntastic'
    Plug 'Shougo/deoplete.nvim'
    Plug 'tpope/vim-fugitive'
    Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
    Plug 'tomtom/tcomment_vim'
    Plug 'SirVer/ultisnips'

    " colorschemes
    Plug 'mhartington/oceanic-next'
    Plug 'morhetz/gruvbox'
    Plug 'nanotech/jellybeans.vim'

    "run :PlugInstall to install new plugins
  call plug#end()

" AIRLINE PLUGIN config
  set laststatus=2                                 "always show airline, instead of only after splitview
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1     "show buffers on top
  let g:airline#extensions#tabline#fnamemod = ':t' "show just the filename
  let g:airline_theme='oceanicnext'
  set t_Co=256                                     "help airline show colors

" DEOPLETE PLUGIN config
  com! Deoplete call deoplete#enable() " use this to start deoplete
  let g:deoplete#file#enable_buffer_path=1   "path completion is relative

  let hostname = substitute(system('hostname'), '\n', '', '')
  if (hostname == "Smithers.local")
    let g:python3_host_prog='/usr/local/bin/python3'
  elseif (hostname == "zamperini2")
    let g:python3_host_prog='/usr/bin/python3'
  endif

" GOYO PLUGIN config
  " make vim close the First time you do :quit
  " https://github.com/junegunn/goyo.vim/wiki/Customization
  function! s:goyo_enter()
    let b:quitting = 0
    let b:quitting_bang = 0
    autocmd QuitPre <buffer> let b:quitting = 1
    cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
  endfunction
  function! s:goyo_leave()
    " Quit Vim if this is the only remaining buffer
    if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
      if b:quitting_bang
        qa!
      else
        qa
      endif
    endif
  endfunction
  autocmd User GoyoEnter call <SID>goyo_enter()
  autocmd User GoyoLeave call <SID>goyo_leave()

" SYNTASTIC PLUGIN config
  let g:syntastic_html_checkers = []
  let g:syntastic_javascript_checkers = ['jshint']

" ULTISNIPS PLUGIN config
  " workaround bug https://github.com/SirVer/ultisnips/issues/711
  let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

" Key Bindings
  " insert mode shortcuts
    :imap <C-@> <C-Space>
    :imap <C-Space> <C-x><C-o>
    :imap jk 
    :inoremap II <Esc>I
    :inoremap AA <Esc>A
    :inoremap jl <Esc>:
    :imap \t <Esc>:r! date "+\%Y\%m\%d"<Enter>kJA

  " normal mode shortucts
    :let mapleader = " "
    "insert time:
    :nmap <Leader>it :r! date "+\%Y\%m\%d"<Enter>kJ
    "insert js log
    :nmap <Leader>il oconsole.log();F)i
    "insert js LOG:
    :nmap <Leader>iL oconsole.log('%c', 'font-size:15px');F,hi
    :nmap  zh
    :nmap  zl
    :nnoremap Q <nop>
    :nmap <Leader>T :enew<cr>
    :nmap <Leader>k :bnext
    :nmap <Leader>j :bprevious
    :nmap <Leader>x :bd
    :nmap <Leader>X :bd!

    " fzf stuff
    :nmap  :FZF
    :nmap <Leader><C-r> :History:
    " histdel("cmd", "regexp") to delete mistaken history items
    :nmap <Leader>f~ :FZF ~

    " tcomment stuff
    :nmap <Leader>/ gcc

    :nmap <Leader>tt :NERDTreeToggle
    :nmap <Leader>tf :NERDTreeFind

  " terminal mode shortcuts
    if has('nvim')
      :tnoremap <C-w> <C-\><C-n><C-w>
    endif

" Prose
  set nojoinspaces  " prevent vim from inserting 2 spaces after periods.
  func! WriteMode()
    set fo=ant
    set flp=^\\s*\\(-\\\\|\\d\\+\\.\\)\\s*
        "formtlistpat=^\s*\(-\|\d\+\.\)\s*
    set formatprg=par\ -jw80
    set nosmartindent
    set foldmethod=indent
    " ^ this only affects gqip, NOTHING ELSE
    " see [help gq]
    set whichwrap+=h,l
  endfu
  com! WM call WriteMode()
  func! NoWriteMode()
    set fo=croql
    set flp=^\s*\d\+[\]:.)}\t ]\s*
    "set formatprg
    "set smartindent
    set foldmethod=indent
    set whichwrap=b,s
  endfu
  com! WMoff call NoWriteMode()

  "I don't use the below function because scrolling is really funky. A
  "paragraph is either all-visible or all-hidden. Nothing in between.
  func! SoftWrappedProcessorMode()
    setlocal noexpandtab
    setlocal wrap
    setlocal linebreak
    setlocal breakindent
    map j gj
    map k gk
    set formatprg=par -jw80
    "setlocal spell spelllang=en_us
    "set thesaurus+=/Users/sbrown/.vim/thesaurus/mthesaur.txt
    "set complete+=s
  endfu
  com! SoftWrapProcessor call SoftWrappedProcessorMode()

"# GUI Customization
  if has('gui_running')
    set background=dark
    colorscheme solarized
    set gfn=Fira\ Mono\ Medium\ for\ Powerline\ Medium\ 10,\ Monaco\ for\ Powerline:h14
    set autoread        "auto-load changes from disk

    :set guioptions-=m  "remove menu bar
    :set guioptions-=T  "remove toolbar
    :set guioptions-=r  "remove right-hand scroll bar
    :set guioptions-=L  "remove left-hand scroll bar
    :set go+=m " I think I want to keep the menu actually
  endif

" Rare Tools
  func! HighlightOverlength()
    highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/
  endfu
  func! SetWidthEightyFour()
    :vertical resize 84
  endfu

" Basics
  set ttimeoutlen=0 "timeout instantly when pressing esc during visual mode
  set foldmethod=indent
  set foldlevelstart=20
  set nowrap
  set nohlsearch    "don't highlight search results
  set ignorecase    "search ignores case
  set smartcase     "unless there's a capital letter
  syntax enable
  set number
  set autoindent
  set smartindent

  set splitbelow    " more natural split behavior
  set splitright    " more natural split behavior

  set hidden        " leave buffers without saving

  if !&scrolloff
    set scrolloff=3 " Show next 3 lines while scrolling.
  endif
  if !&sidescrolloff
    set sidescrolloff=5 " Show next 5 columns while side-scrolling.
  endif
  "(source: http://nerditya.com/code/guide-to-neovim/)

" Tabs
  set expandtab     " spaces are better than tab characters
  set smarttab      " don't know
  func! SetTabSizeFour()
    set tabstop=4     " for when you press tab
    set shiftwidth=4  " for autoindent, I think
  endfu
  com! Tab4 call SetTabSizeFour()
  func! SetTabSizeTwo()
    set tabstop=2     " for when you press tab
    set shiftwidth=2  " for autoindent, I think
  endfu
  com! Tab2 call SetTabSizeTwo()
  :Tab2

" Neovim specific
  if has('nvim')
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    colorscheme OceanicNext
    set background=dark
    set nofixeol      " don't insert EOL at end of file
  end
