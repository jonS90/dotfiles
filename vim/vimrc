" Note: NeoVim's html-embedded-javascript indentation is isn't smart like Vim
" 8's. It needs to be updated. Until then, you can fix it by running this
" command:
" curl https://raw.githubusercontent.com/vim/vim/master/runtime/indent/html.vim > ~/.vim/plugged/vim-javascript/indent/html.vim

let s:vimrcIsExecuting = 1

" Install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" VIM PLUG
  call plug#begin('~/.vim/plugged')

    Plug 'airblade/vim-gitgutter'
    " Show indicators for what's been modified/added/deleted.

    Plug 'alvan/vim-closetag'
    " Automatically close html tags.

    Plug 'ciaranm/detectindent'
    " Analyze current buffer and configure tabbing to match.

    Plug 'editorconfig/editorconfig-vim'
    " Configure different coding styles on a per-project basis and have vim
    " automatically adjust. There are equivalent plugins for all major code
    " editors. It's great. In a better world, every project would have a
    " .editorconfig file at its root.

    Plug 'jeetsukumaran/vim-filebeagle'
    " Super-minimal file explorer accessible through the '-' key.

    Plug 'jeetsukumaran/vim-indentwise'
    " Navigation based on indentation. I currently don't use this.

    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    " Incredible fuzzy search for all sorts of things. Best plugin ever.

    Plug 'junegunn/goyo.vim'
    " Distraction free mode. Good for coding and as well as prose writing.

    Plug 'junegunn/rainbow_parentheses.vim'
    let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

    Plug 'junegunn/vim-easy-align'
    " Align chunks of code on a character/regex. Makes it really easy to have
    " nice formatting.

    Plug 'mattn/emmet-vim'
    " Faster html entry. I currently don't use this.

    Plug 'nelstrom/vim-visual-star-search'
    " Bring "*" key behavior into visual mode. Extremely useful.
    " (see ":help *").

    Plug 'pangloss/vim-javascript'
    " Vastly improved syntax highlighting.

    Plug 'ryanoasis/vim-devicons'
    " Shows pretty little icons when you use a nerdfont in your terminal.

    Plug 'scrooloose/nerdtree'
    " Project tree sidebar that kind of defies the philosophy of vim

    Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
    " Async always-on auto-complete. I currently don't use this.

    Plug 'SirVer/ultisnips'
    " I use this for Polymer element templates.

    Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
    " Intelligent completion for JavaScript. It's amazing.

    Plug 'terryma/vim-multiple-cursors'
    " Like Sublime's Cmd-D. Ctrl-N on a word to multiply your cursor on
    " subsequent matches for batch editing.

    Plug 'tomtom/tcomment_vim'
    " Toggle code comments. Mapped to Ctrl-/

    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-rhubarb'
    Plug 'tpope/vim-unimpaired'
    " Various integrated git tools. I use this a lot. I only use use the
    " unimpaired plugin with fugitive's ":Glog" command.

    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    " Show info bars above and below buffers.

    Plug 'vimwiki/vimwiki'
    " Quick access to a personal wiki. In vim.

    Plug 'w0rp/ale'
    " Asynchronous linting of all kinds. I use this for bash scripting, fish
    " shell, vim, javascript, and more.

    " Plug 'wellle/targets.vim'
    " Advanced vim text objects. Sometimes this is slow.

    Plug 'xolox/vim-notes'
    Plug 'xolox/vim-misc'
    " Quickly write and access notes that sync to Dropbox

    " languages
    Plug 'posva/vim-vue'
    Plug 'dag/vim-fish'
    Plug 'fatih/vim-go'

    " colorschemes
    Plug 'NLKNguyen/papercolor-theme'
    Plug 'mhartington/oceanic-next'
    Plug 'morhetz/gruvbox'
    Plug 'nanotech/jellybeans.vim'
    Plug 'rakr/vim-one'

    if has('mac')
      Plug 'junegunn/vim-xmark', { 'do': 'make' }
    endif

    "run :PlugInstall to install new plugins
  call plug#end()

" vim-airline/vim-airline
  set laststatus=2                                 "always show airline, instead of only after splitview
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1     "show buffers on top
  let g:airline#extensions#tabline#fnamemod = ':t' "show just the filename
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep=''
  let g:airline_right_sep=''
  let g:airline_left_alt_sep = '#'
  let g:airline_right_alt_sep = '#'
  let g:airline#extensions#whitespace#mixed_indent_algo = 1 "allow some spaces after tabs for javadoc
  set t_Co=256                                     "help airline show colors

" Shougo/deoplete.nvim
  com! Deoplete call deoplete#enable() " use this to start deoplete
  let g:deoplete#file#enable_buffer_path=1   "path completion is relative
  let g:deoplete#omni#functions = {}
  let g:deoplete#omni#functions.javascript = [
    \ 'tern#Complete'
  \]

  if (hostname() == "Smithers.local")
    let g:python3_host_prog='/usr/local/bin/python3'
  elseif (hostname() == "zamperini4")
    let g:python3_host_prog='/usr/bin/python3'
  endif

" ternjs/tern_for_vim
  let tern_show_signature_in_pum          = 1
  let tern_show_argument_hints            = "no" "default
  set updatetime=1000
  " set noshowmode " requested for tern_show_argument_hints

" ryanoasis/vim-devicons
  let g:webdevicons_enable_airline_tabline = 1
  let g:webdevicons_enable = 1


" junegunn/goyo.vim
  let g:goyo_width = 81
  " make vim close the First time you do :quit
  " https://github.com/junegunn/goyo.vim/wiki/Customization
  function! s:goyo_enter()
    let b:quitting = 0
    let b:quitting_bang = 0
    autocmd QuitPre <buffer> let b:quitting = 1
    cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
  endfunction
  function! s:goyo_leave()
    " Quit Vim if this is the only remaining buffer
    if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
      if b:quitting_bang
        qa!
      else
        qa
      endif
    endif
  endfunction
  autocmd User GoyoEnter call <SID>goyo_enter()
  autocmd User GoyoLeave call <SID>goyo_leave()

" xolox/vim-notes
  let g:notes_directories = ['~/Dropbox/vim-notes']
  let g:notes_smart_quotes = 0
  let g:notes_suffix = ".txt"
  let g:notes_conceal_bold = 0

" pangloss/vim-javascript
  let g:javascript_plugin_jsdoc = 1

" w0rp/ale
  let g:ale_linters = {
    \ 'html': ['eslint', 'htmlhint'],
    \ 'javascript': ['eslint'],
    \ 'java': [],
  \}
  let g:ale_linter_aliases = { 'html': ['html', 'javascript'] }
  let g:ale_echo_msg_format = '(%linter%) %s'

" SirVer/ultisnips
  " workaround bug https://github.com/SirVer/ultisnips/issues/711
  let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

" vimwiki/vimwiki
  let g:vimwiki_list = [{'path': '$HOME/Dropbox/vimwiki'}] " 'syntax': 'markdown', 'ext': '.md'}]

" Key Bindings
  " insert mode shortcuts
    :imap <C-@> <C-Space>
    :imap <C-Space> <C-x><C-o>
    :imap jk 
    " :inoremap II <Esc>I
    " :inoremap AA <Esc>A
    :inoremap jl <Esc>:
    :imap \t <Esc>:r! date "+\%Y\%m\%d"<Enter>kJA

  " normal mode shortucts
    :let mapleader = " "
    "insert time:
    :nmap <Leader>it :r! date "+\%Y\%m\%d"<Enter>kJ
    "search for word in working directory
    :nmap <Leader>sw :Ag 
    :vmap <Leader>s  y:Ag "<Enter>

    "insert js log
    :nmap <Leader>il oconsole.log();F)i
    "insert js LOG:
    :nmap <Leader>iL oconsole.log('%c', 'font-size:15px');F,hi
    :nmap <Leader>liw yiwoconsole.log('0', 0);<Esc>
    :nmap <Leader>lif yiwoconsole.debug('0()');<Esc>
    :nmap <Leader>liF yiwoconsole.log('%c0()', 'font-size:15px');<Esc>^2w
    :nmap <Leader>gif yiwf{oconsole.group('0');<Esc>]}Oconsole.groupEnd();<Esc>^
    "insert jsdoc comment in html
    " :nmap <Leader>ihjd :syntax sync fromstart\O/**\*/^XO€kb * 
    " :nmap <Leader>ihjd O/**\*\*/kA
    :nmap <C-h> 2zh
    :nmap <C-l> 2zl
    :nnoremap Q <nop>
    :nmap <Leader>T :enew<cr>
    :nmap <Leader>bk :bnext
    :nmap <Leader>bj :bprevious
    let g:BASH_Ctrl_j = 'off' "this is undocumented!
    :nmap <C-j> :bprevious
    :nmap <C-k> :bnext
    :nmap <Leader>x :NERDTreeClose<enter>:bd
    :nmap <Leader>X :NERDTreeClose<enter>:bd!
    :nmap <Leader><Leader> :w<Enter>
    " :nmap <Leader>W :bd!\
    :nmap <Leader><Tab> :b#
          "most recent buffer
    :nmap <Leader>ss :syntax sync fromstart<enter>
    :nmap <Leader>BD :bufdo bd<enter>
    :nmap <C-b> :Buffers<enter>
          " lists most recent buffers (and allows fuzzy find)

    :let html_wrong_comments=1 "be lenient with html comment syntax. This is a must-have for documented Polymer code.

    " syntax debugging (JIC)?
    map <F10> :echo "syntax debugger: <" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
          \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
          \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

    " junegunn/vim-easy-align
    :xmap ga <Plug>(EasyAlign)
    :nmap ga <Plug>(EasyAlign)

    " junegunn/fzf.vim
    inoremap <expr> <c-x><c-f> fzf#vim#complete#path(
          \ "find . -path '*/\.*' -prune -o -print \| sed '1d;s:^..::'",
          \ fzf#wrap({'dir': expand('%:p:h')}))

    " CODE COPIED FROM https://github.com/zenbro/dotfiles/blob/master/.nvimrc#L151-L187
      " If split in given direction exists - jump, else create new split
      function! JumpOrOpenNewSplit(key, cmd, fzf) " {{{
        let current_window = winnr()
        execute 'wincmd' a:key
        if current_window == winnr()
          execute a:cmd
          if a:fzf
            Files
          endif
        else
          if a:fzf
            Files
          endif
        endif
      endfunction " }}}
      nnoremap <silent> <Leader>hh :call JumpOrOpenNewSplit('h', ':leftabove vsplit', 0)<CR>
      nnoremap <silent> <Leader>ll :call JumpOrOpenNewSplit('l', ':rightbelow vsplit', 0)<CR>
      nnoremap <silent> <Leader>kk :call JumpOrOpenNewSplit('k', ':leftabove split', 0)<CR>
      nnoremap <silent> <Leader>jj :call JumpOrOpenNewSplit('j', ':rightbelow split', 0)<CR>
      " Same as above, except it opens unite at the end
      nnoremap <silent> <Leader>h<Space> :call JumpOrOpenNewSplit('h', ':leftabove vsplit', 1)<CR>
      nnoremap <silent> <Leader>l<Space> :call JumpOrOpenNewSplit('l', ':rightbelow vsplit', 1)<CR>
      nnoremap <silent> <Leader>k<Space> :call JumpOrOpenNewSplit('k', ':leftabove split', 1)<CR>
      nnoremap <silent> <Leader>j<Space> :call JumpOrOpenNewSplit('j', ':rightbelow split', 1)<CR>
      " Delete all hidden buffers
      nnoremap <silent> <Leader><BS>b :call DeleteHiddenBuffers()<CR>
      function! DeleteHiddenBuffers() " {{{
        let tpbl=[]
        call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
        for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
          silent execute 'bwipeout' buf
        endfor
      endfunction " }}}


    " set bash as shell so <C-X><C-F> file completion works
    " - ALSO, NeoVim async jobs return data with a prepended "[1 q" for
    "   someone unfathomable reason. That's no good.
    if (hostname() == "Smithers.local")
      :set shell=/usr/local/bin/bash "
    elseif (hostname() == "zamperini4")
      :set shell=/bin/bash "
    endif

    " THIS DOES NOT WORK
    func! FishCantEven(str)
      set shell /usr/bin/fish
      echom a:str
      :exec '!'.a:str
      " echo a:000
      " set shell /bin/bash
    endfunc
    :com! -nargs=1 FishCantEven call FishCantEven(<args>)

    :nmap  :Files
    :nmap <Leader>or :History
    " ^ open recent file
    :nmap <Leader>/ :History/
    :nmap <Leader><C-r> :History:
    " call histdel("cmd", "regexp") to delete mistaken history items
    :nmap <Leader>f~ :FZF ~
    :nmap <Leader>ft :Filetypes<enter>
    command! AirlineThemes call fzf#run({
                \ 'source':  map(split(globpath(&rtp, 'autoload/airline/themes/*.vim'), "\n"),
                \               "substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"),
                \ 'sink':    'AirlineTheme',
                \ 'options': '+m --prompt="Airline Themes> "',
                \ 'down':    '~40%'
                \})
    command! -bang -nargs=* Rg
                \ call fzf#vim#grep(
                \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
                \   <bang>0 ? fzf#vim#with_preview('up:60%')
                \           : fzf#vim#with_preview('right:50%:hidden', '?'),
                \   <bang>0)
    command! FormatJSON :%!python -m json.tool

    if has('nvim')
      tmap <C-u> <C-k><C-k><C-k><C-k><C-k><C-k><C-k><C-k><C-k><C-k><C-k><C-k><C-k>
      tmap <C-d> <C-j><C-j><C-j><C-j><C-j><C-j><C-j><C-j><C-j><C-j><C-j><C-j><C-j>
    endif

    " nerdtree stuff
    :nmap <Leader>tt :NERDTreeToggle
    :nmap <Leader>tf :NERDTreeFind
    " close nerdtree if it's the only remaining buffer
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " git stuff
    :nmap <Leader>gb :Gblame<Enter>

    " GitGutter stuff
    :nmap <Leader>ga :GitGutterStageHunk<Enter>
    :nmap <Leader>gH :GitGutterLineHighlightsToggle<Enter>
    :nmap <Leader>gn :GitGutterNextHunk<Enter>
    :nmap <Leader>gN :GitGutterPrevHunk<Enter>
    :nmap <Leader>gP :GitGutterPreviewHunk<Enter>
    :nmap <Leader>gu :GitGutterUndoHunk<Enter>

    " ternjs stuf
    :nmap <Leader>td :TernDoc<cr>
    :autocmd CompleteDone * pclose

  " terminal mode shortcuts
    if has('nvim')
      :tnoremap <C-w> <C-\><C-n><C-w>
      " conflicts with FZF
      " :tmap <C-j> <C-\><C-n>:bprevious<Enter>
      " :tmap <C-k> <C-\><C-n>:bnext<Enter>
    endif

" Miscellanious commands
  com! JJ exec "cd /Users/smithers/git/UC2/uc2-app/uc2/src/main/web/"
  com! JU exec "cd /Users/smithers/git/UC2/uc2-app/"
  com! JA exec "cd /Users/smithers/git/estatfstat/"
  com! JAJ exec "cd /Users/smithers/git/estatfstat/airstat/src/main/web/"
  com! Uc2js exec "cd /Users/smithers/git/UC2/uc2-app/uc2/src/main/web/"
  com! Uc2 exec "cd /Users/smithers/git/UC2/uc2-app/"
  com! JL exec "cd /home/smithers/git/lambda"
  com! JM exec "cd /home/smithers/git/mailman"
  com! JT exec "cd /home/smithers/git/TourApp/app"

  " open url on current line
  com! OpenUrl exec "!python -mwebbrowser \"".(matchstr (getline("."), "https\\?://[a-zA-Z0-9\./\\-?=\\&+@,!:_]\\+[^.) ]"))."\""
  com! TestUrl exec "echom                \"".(matchstr (getline("."), "https\\?://[a-zA-Z0-9\./\\-?=\\&+@,!:_]\\+[^.) ]"))."\""
  " toggle plugins and syntax to make vim really fast
  com! Fast :GitGutterToggle | :AirlineToggle | :ALEToggle | :call deoplete#toggle() | :if exists("g:syntax_on") | syntax off | else | syntax enable | endif

" Viewer
  func! Reader()
      :AnsiEsc
      :AirlineToggle
      let g:airline#extensions#tabline#enabled = 0
      set laststatus=0
      set nonu
  endfu

" Experimental scroll mode
  nmap zs zz:call ToggleScrollMode()<Enter>
  function! ToggleScrollMode()
    if exists("s:scroll_mode")
      unmap k
      unmap j
      unlet s:scroll_mode
      echom "scroll mode off"
    else
      nnoremap j <C-e>j
      nnoremap k <C-y>k
      let s:scroll_mode = 1
      echom "scroll mode on"
    endif
  endfunction


" Prose
  set nojoinspaces  " prevent vim from inserting 2 spaces after periods.
  func! WriteMode()
    " set fo=ant
    set fo=an
    set flp=^\\s*\\(-\\\\|\\d\\+\\.\\)\\s*
        "formtlistpat=^\s*\(-\|\d\+\.\)\s*
    " set formatprg=par\ -jw80
    set nosmartindent
    " ^ this only affects gqip, NOTHING ELSE see [help gq]
    set whichwrap+=h,l
    let g:deoplete#disable_auto_complete = 1
    set sidescrolloff=0
  endfu
  com! WM call WriteMode()
  func! NoWriteMode()
    set fo=croql
    " set flp=^\s*\d\+[\]:.)}\t ]\s*
    set formatprg=""
    set smartindent
    set whichwrap=b,s
    let g:deoplete#disable_auto_complete = 0

    set sidescrolloff=5 " Show next 5 columns while side-scrolling.
  endfu
  com! WMoff call NoWriteMode()

  "I don't use the below function because scrolling is really funky. A
  "paragraph is either all-visible or all-hidden. Nothing in between.
  func! SoftWrappedProcessorMode()
    setlocal noexpandtab
    setlocal wrap
    setlocal linebreak
    setlocal breakindent
    map j gj
    map k gk
    set formatprg=par -jw80
    "setlocal spell spelllang=en_us
    "set thesaurus+=/Users/sbrown/.vim/thesaurus/mthesaur.txt
    "set complete+=s
  endfu
  com! SoftWrapProcessor call SoftWrappedProcessorMode()

" visor style terminal buffer
  " https://www.reddit.com/r/neovim/comments/3cu8fl/quick_visor_style_terminal_buffer/
  let s:termbuf = 0
  function! ToggleTerm()
      topleft 30 split
      try
          exe 'buffer' . s:termbuf
          startinsert
      catch
          terminal
          let s:termbuf=bufnr('%')
          tnoremap <buffer> <A-t>  <C-\><C-n>:close<cr>
      endtry
  endfunction
  com! ToggleTerm call ToggleTerm()
  nnoremap <A-t> :ToggleTerm<cr>


"# GUI Customization
  if has('gui_running')
    set background=dark
    set gfn=Fira\ Mono\ Medium\ for\ Powerline\ Medium\ 10,\ Monaco\ for\ Powerline:h14
    set autoread        "auto-load changes from disk

    :set guioptions-=m  "remove menu bar
    :set guioptions-=T  "remove toolbar
    :set guioptions-=r  "remove right-hand scroll bar
    :set guioptions-=L  "remove left-hand scroll bar
    :set go+=m " I think I want to keep the menu actually
  endif

" Rare Tools
  func! HighlightOverlength()
    highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/
  endfu
  func! SetWidthEightyFour()
    :vertical resize 84
  endfu

" Basics
  set ttimeoutlen=0 "timeout instantly when pressing esc during visual mode
  set foldmethod=syntax
  set foldlevelstart=99
  set nowrap
  set incsearch     "incremental search (something else also turns this on)
  set wildmenu      "show suggestions for vim commands
  set ignorecase    "search ignores case
  set smartcase     "unless there's a capital letter
  syntax enable
  set number
  set autoindent
  set smartindent
  set hlsearch      " default in NeoVim

  set splitbelow    " more natural split behavior
  set splitright    " more natural split behavior

  set hidden        " leave buffers without saving

  set completeopt=menuone,longest,preview " make completion menu awesome

  :cabbrev h vert h
                    " execute [:h QUERY] to open help page in vertical split buffer

  if !&scrolloff
    set scrolloff=3 " Show next 3 lines while scrolling.
  endif
  if !&sidescrolloff
    set sidescrolloff=5 " Show next 5 columns while side-scrolling.
  endif
  "(source: http://nerditya.com/code/guide-to-neovim/)

" Tabs
  set expandtab     " SPACES over TABS
  set smarttab      " delete multiple spaces at once (as if deleting a tab character)
  com! -nargs=1 Tab      set      tabstop=<args> | set      shiftwidth=<args> "| set softtabstop=<args>
  com! -nargs=1 LocalTab setlocal tabstop=<args> | setlocal shiftwidth=<args> "| set softtabstop=<args>
  " if (hostname() == "Smithers.local")
  "   :Tab 4
  " elseif (hostname() == "zamperini2")
  "   :Tab 2
  " elseif (hostname() == "zamperini4")
  "   :Tab 2
  " endif

  " autocmd Filetype vimrc setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

  func! JSFormatting()
    autocmd FileType javascript setlocal equalprg=js-beautify\ --stdin
  endfu

" Theme shortcuts
  com! DarkGruv   set background=dark  | colorscheme gruvbox          | let g:airline_theme='gruvbox'     | if (!s:vimrcIsExecuting) | execute(":AirlineTheme gruvbox")     | endif
  com! DarkOcean  set background=dark  | colorscheme OceanicNext      | let g:airline_theme='oceanicnext' | if (!s:vimrcIsExecuting) | execute(":AirlineTheme oceanicnext") | endif
  com! DarkPaper  set background=dark  | colorscheme papercolor       | let g:airline_theme='papercolor'  | if (!s:vimrcIsExecuting) | execute(":AirlineTheme papercolor")  | endif
  com! DarkOne    set background=dark  | colorscheme one              | let g:airline_theme='one'         | if (!s:vimrcIsExecuting) | execute(":AirlineTheme one")         | endif
  com! LightOne   set background=light | colorscheme one              | let g:airline_theme='one'         | if (!s:vimrcIsExecuting) | execute(":AirlineTheme one")         | endif
  com! LightGruv  set background=light | colorscheme gruvbox          | let g:airline_theme='gruvbox'     | if (!s:vimrcIsExecuting) | execute(":AirlineTheme gruvbox")     | endif
  com! LightOcean set background=light | colorscheme OceanicNextLight | let g:airline_theme='oceanicnext' | if (!s:vimrcIsExecuting) | execute(":AirlineTheme oceanicnext") | endif
  com! LightPaper set background=light | colorscheme papercolor       | let g:airline_theme='papercolor'  | if (!s:vimrcIsExecuting) | execute(":AirlineTheme papercolor")  | endif

" Neovim specific
  if has('nvim')
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    :DarkGruv
    set nofixeol      " don't insert EOL at end of file
    " Deoplete
  else
    "dark ocean
    :DarkPaper
  end

" simple session restoration http://vim.wikia.com/wiki/Go_away_and_come_back
  function! MakeSession()
    let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
    if (filewritable(b:sessiondir) != 2)
      exe 'silent !mkdir -p ' b:sessiondir
      redraw!
    endif
    let b:filename = b:sessiondir . '/session.vim'
    exe "mksession! " . b:filename
  endfunction

  function! LoadSession()
    let b:sessiondir = $HOME . "/.vim/sessions" . getcwd()
    let b:sessionfile = b:sessiondir . "/session.vim"
    if (filereadable(b:sessionfile))
      exe 'source ' b:sessionfile
    else
      echo "No session loaded."
    endif
  endfunction
  " au VimEnter * nested if argc() == 0 | :call LoadSession() | endif
  au VimLeave * :call MakeSession()
  com! LoadSession call LoadSession()

" Auto Commands
  augroup vimrc_autocomamnds
    autocmd!

    " custom filetype behaviors
    autocmd FileType gitcommit setlocal spell
    autocmd FileType gitcommit startinsert!
    autocmd FileType text      setlocal spell

    " auto-reload vimrc whenever I save it
    autocmd BufWritePost vimrc,.vimrc,*.vim source $MYVIMRC | AirlineToggle | AirlineToggle | AirlineRefresh
    "                                                         ^ not entirely sure why all this craziness is necessary

    " disable syntax when editing huge files so vim stays snappy
    autocmd Filetype * if (getfsize(@%) > 500000) | setlocal syntax=OFF | endif

  augroup END

  " lil debugging util
  com! -nargs=1 Log execute 'silent! ! echo ' . fnameescape(<args>) . ' >> VIM_LOG'
let s:vimrcIsExecuting = 0
